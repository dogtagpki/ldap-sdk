name: DS Tests

on: [push, pull_request]

jobs:
  init:
    name: Initializing Workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
        run: |
          tests/bin/init-workflow.sh

  build:
    name: Building LDAP SDK
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build runner image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
            BUILD_OPTS=--with-timestamp --with-commit-id
          tags: ldapjdk-runner
          target: ldapjdk-runner
          outputs: type=docker,dest=ds-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: ds-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ds-runner.tar

  ds-test:
    name: Testing DS
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/ldapjdk
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: ds-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ds-runner.tar

      - name: Load runner image
        run: docker load --input ds-runner.tar

      - name: Run container
        run: |
          IMAGE=ldapjdk-runner \
          NAME=ds \
          HOSTNAME=ds.example.com \
          tests/bin/runner-init.sh

      - name: Install DS package
        run: docker exec ds dnf install -y 389-ds-base

      - name: Create DS instance
        run: docker exec ds ${SHARED}/tests/bin/ds-create.sh

      - name: Verify LDAP tools
        run: docker exec ds ${SHARED}/tests/bin/tools-test.sh

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh ds

      - name: Remove DS instance
        run: docker exec ds ${SHARED}/tests/bin/ds-remove.sh

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ds-${{ matrix.os }}
          path: |
            /tmp/artifacts/ds

  ds-ssl-test:
    name: Testing DS with SSL
    needs: [init, build]
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/ldapjdk
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3

      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: ds-runner-${{ matrix.os }}-${{ github.run_id }}
          path: ds-runner.tar

      - name: Load runner image
        run: docker load --input ds-runner.tar

      - name: Run container
        run: |
          IMAGE=ldapjdk-runner \
          NAME=server \
          HOSTNAME=server.example.com \
          tests/bin/runner-init.sh

      - name: Install DS package
        run: docker exec server dnf install -y 389-ds-base dogtag-pki

      - name: Create DS instance
        run: docker exec server ${SHARED}/tests/bin/ds-create.sh

      - name: Create signing cert
        run: docker exec server ${SHARED}/tests/bin/ds-cert-signing-create.sh

      - name: Create server cert
        run: docker exec server ${SHARED}/tests/bin/ds-cert-server-create.sh

      - name: Enable SSL connection
        run: docker exec server ${SHARED}/tests/bin/ds-ssl-enable.sh

      - name: Verify LDAP tools with SSL
        run: |
          # TODO: use SSL
          docker exec server ${SHARED}/tests/bin/tools-test.sh

      - name: Remove DS instance
        run: docker exec server ${SHARED}/tests/bin/ds-remove.sh

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh server

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ds-ssl-${{ matrix.os }}
          path: |
            /tmp/artifacts/server
